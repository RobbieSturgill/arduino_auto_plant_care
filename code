<Wire.h>
#include <U8g2lib.h>
#include <Encoder.h>

// Define the pins for the soil moisture sensors
#define MOISTURE_1 A0
#define MOISTURE_2 A1
#define MOISTURE_3 A2
#define MOISTURE_4 A3

// Define the pins for the relay modules
#define RELAY_1 2
#define RELAY_2 3
#define RELAY_3 4
#define RELAY_4 5

// Define the pins for the rotary encoder
#define ENCODER_A 6
#define ENCODER_B 7
#define ENCODER_BUTTON 8
Encoder encoder(ENCODER_A, ENCODER_B);

// Define the pump time limits
#define PUMP_TIME_MIN 0
#define PUMP_TIME_MAX 10000

// Define the PID constants
#define KP 1.0
#define KI 0.1
#define KD 0.1

// Create an instance of the OLED u8g2
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);

// Initialize the variables for the desired moisture level and pump time
int desired_moisture = 50;
int pump_time1 = 0;
int pump_time2 = 0;
int pump_time3 = 0;
int pump_time4 = 0;

// Initialize the variables for the PID loop
double input1, input2, input3, input4, output1, output2, output3, output4, setpoint;
double error1, error2, error3, error4, last_error1, last_error2, last_error3, last_error4, integral1, integral2, integral3, integral4, derivative1, derivative2, derivative3, derivative4;
unsigned long last_time;

// Function to set the pump time based on the output of the PID loop
void set_pump_time(int pump, int time) {
  if (pump == 1) {
    if (time > PUMP_TIME_MAX) {
      time = PUMP_TIME_MAX;
    }
    if (time < PUMP_TIME_MIN) {
      time = PUMP_TIME_MIN;
    }
    digitalWrite(RELAY_1, LOW); // Turn on the relay module
    delay(time); // Wait for the pump time
    digitalWrite(RELAY_1, HIGH); // Turn off the relay module
  } else if (pump == 2) {
    if (time > PUMP_TIME_MAX) {
      time = PUMP_TIME_MAX;
    }
    if (time < PUMP_TIME_MIN) {
      time = PUMP_TIME_MIN;
    }
    digitalWrite(RELAY_2, LOW); // Turn on the relay module
    delay(time); // Wait for the pump time
    digitalWrite(RELAY_2,HIGH); // Turn off the relay module
} else if (pump == 3) {
if (time > PUMP_TIME_MAX) {
time = PUMP_TIME_MAX;
}
if (time < PUMP_TIME_MIN) {
time = PUMP_TIME_MIN;
}
digitalWrite(RELAY_3, LOW); // Turn on the relay module
delay(time); // Wait for the pump time
digitalWrite(RELAY_3, HIGH); // Turn off the relay module
} else if (pump == 4) {
if (time > PUMP_TIME_MAX) {
time = PUMP_TIME_MAX;
}
if (time < PUMP_TIME_MIN) {
time = PUMP_TIME_MIN;
}
digitalWrite(RELAY_4, LOW); // Turn on the relay module
delay(time); // Wait for the pump time
digitalWrite(RELAY_4, HIGH); // Turn off the relay module
}
}

void setup() {
// Initialize the serial communication
Serial.begin(9600);

// Initialize the relay modules as outputs
pinMode(RELAY_1, OUTPUT);
pinMode(RELAY_2, OUTPUT);
pinMode(RELAY_3, OUTPUT);
pinMode(RELAY_4, OUTPUT);

// Initialize the rotary encoder pins
pinMode(ENCODER_BUTTON, INPUT_PULLUP);

// Initialize the OLED u8g2
u8g2.begin();
u8g2.clearBuffer();
u8g2.sendBuffer();

// Initialize the PID loop variables
input1 = analogRead(MOISTURE_1);
input2 = analogRead(MOISTURE_2);
input3 = analogRead(MOISTURE_3);
input4 = analogRead(MOISTURE_4);
setpoint = desired_moisture;
last_time = millis();
}

void loop() {
// Read the moisture levels from the soil moisture sensors
int moisture1 = analogRead(MOISTURE_1);
int moisture2 = analogRead(MOISTURE_2);
int moisture3 = analogRead(MOISTURE_3);
int moisture4 = analogRead(MOISTURE_4);
  
// Compute the error for each plant
error1 = setpoint - moisture1;
error2 = setpoint - moisture2;
error3 = setpoint - moisture3;
error4 = setpoint - moisture4;

// Compute the integral for each plant
unsigned long now = millis();
double time_delta = (double)(now - last_time) / 1000.0;
integral1 += error1 * time_delta;
integral2 += error2 * time_delta;
integral3 += error3 * time_delta;
integral4 += error4 * time_delta;

// Compute the derivative for each plant
derivative1 = (error1 - last_error1) / time_delta;
derivative2 = (error2 - last_error2) / time_delta;
derivative3 = (error3 - last_error3) / time_delta;
derivative4 = (error4 - last_error4) / time_delta;

// Compute the output for each plant using the PID algorithm
output1 = KP * error1 + KI * integral1 + KD * derivative1;
output2 = KP * error2 + KI * integral2 + KD * derivative2;
output3 = KP * error3 + KI * integral3 + KD * derivative3;
output4 = KP * error4 + KI * integral4 + KD * derivative4;

// Update the last error and last time for each plant
last_error1 = error1;
last_error2 = error2;
last_error3 = error3;
last_error4 = error4;
last_time = now;

// Set the pump time for each plant based on the PID output
pump_time1 = (int)output1;
pump_time2 = (int)output2;
pump_time3 = (int)output3;
pump_time4 = (int)output4;

// Control the pumps according to the calculated pump times
set_pump_time(1, pump_time1);
set_pump_time(2, pump_time2);
set_pump_time(3, pump_time3);
set_pump_time(4, pump_time4);

// Update the OLED u8g2 with the moisture levels and pump times
u8g2.clearBuffer();
u8g2.setFont(u8g2_font_ncenB08_tr); // Set the desired font
u8g2.setDrawColor(1); // Set the draw color to white (1)

// u8g2 content in the yellow area
u8g2.setCursor(0, 0);
u8g2.print("Moisture 1: ");
u8g2.println(moisture1);
u8g2.print("Moisture 2: ");
u8g2.println(moisture2);

// u8g2 content in the blue area
u8g2.setCursor(0, 32);
u8g2.print("Moisture 3: ");
u8g2.println(moisture3);
u8g2.print("Moisture 4: ");
u8g2.println(moisture4);
u8g2.print("Pump Time 1: ");
u8g2.println(pump_time1);
u8g2.print("Pump Time 2: ");
u8g2.println(pump_time2);
u8g2.print("Pump Time 3: ");
u8g2.println(pump_time3);
u8g2.print("Pump Time 4: ");
u8g2.println(pump_time4);

u8g2.sendBuffer();

// Check for user input from the rotary encoder
long newPosition = encoder.read();
if (newPosition != 0) {
desired_moisture += newPosition;
if (desired_moisture < 0) {
desired_moisture = 0;
} else if (desired_moisture > 100) {
desired_moisture = 100;
}
setpoint = desired_moisture;
encoder.write(0);
}

// Handle rotary encoder button press
if (digitalRead(ENCODER_BUTTON) == LOW) {
// Add any desired functionality when the encoder button is pressed
}

delay(1000); // Wait for 1 second before repeating the loop
}

